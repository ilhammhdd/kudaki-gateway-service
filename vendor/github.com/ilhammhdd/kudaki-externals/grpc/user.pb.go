// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/user.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	events "github.com/ilhammhdd/kudaki-entities/events"
	user "github.com/ilhammhdd/kudaki-entities/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserAuthenticationRequested struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Jwt                  string   `protobuf:"bytes,2,opt,name=jwt,proto3" json:"jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAuthenticationRequested) Reset()         { *m = UserAuthenticationRequested{} }
func (m *UserAuthenticationRequested) String() string { return proto.CompactTextString(m) }
func (*UserAuthenticationRequested) ProtoMessage()    {}
func (*UserAuthenticationRequested) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f3a799ad09b2336, []int{0}
}

func (m *UserAuthenticationRequested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAuthenticationRequested.Unmarshal(m, b)
}
func (m *UserAuthenticationRequested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAuthenticationRequested.Marshal(b, m, deterministic)
}
func (m *UserAuthenticationRequested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAuthenticationRequested.Merge(m, src)
}
func (m *UserAuthenticationRequested) XXX_Size() int {
	return xxx_messageInfo_UserAuthenticationRequested.Size(m)
}
func (m *UserAuthenticationRequested) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAuthenticationRequested.DiscardUnknown(m)
}

var xxx_messageInfo_UserAuthenticationRequested proto.InternalMessageInfo

func (m *UserAuthenticationRequested) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserAuthenticationRequested) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type UserAuthenticated struct {
	Uid                  string         `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	EventStatus          *events.Status `protobuf:"bytes,2,opt,name=event_status,json=eventStatus,proto3" json:"event_status,omitempty"`
	User                 *user.User     `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserAuthenticated) Reset()         { *m = UserAuthenticated{} }
func (m *UserAuthenticated) String() string { return proto.CompactTextString(m) }
func (*UserAuthenticated) ProtoMessage()    {}
func (*UserAuthenticated) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f3a799ad09b2336, []int{1}
}

func (m *UserAuthenticated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAuthenticated.Unmarshal(m, b)
}
func (m *UserAuthenticated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAuthenticated.Marshal(b, m, deterministic)
}
func (m *UserAuthenticated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAuthenticated.Merge(m, src)
}
func (m *UserAuthenticated) XXX_Size() int {
	return xxx_messageInfo_UserAuthenticated.Size(m)
}
func (m *UserAuthenticated) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAuthenticated.DiscardUnknown(m)
}

var xxx_messageInfo_UserAuthenticated proto.InternalMessageInfo

func (m *UserAuthenticated) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserAuthenticated) GetEventStatus() *events.Status {
	if m != nil {
		return m.EventStatus
	}
	return nil
}

func (m *UserAuthenticated) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserAuthorizationRequested struct {
	Uid                  string    `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Role                 user.Role `protobuf:"varint,2,opt,name=role,proto3,enum=entities.user.Role" json:"role,omitempty"`
	Jwt                  string    `protobuf:"bytes,3,opt,name=jwt,proto3" json:"jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserAuthorizationRequested) Reset()         { *m = UserAuthorizationRequested{} }
func (m *UserAuthorizationRequested) String() string { return proto.CompactTextString(m) }
func (*UserAuthorizationRequested) ProtoMessage()    {}
func (*UserAuthorizationRequested) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f3a799ad09b2336, []int{2}
}

func (m *UserAuthorizationRequested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAuthorizationRequested.Unmarshal(m, b)
}
func (m *UserAuthorizationRequested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAuthorizationRequested.Marshal(b, m, deterministic)
}
func (m *UserAuthorizationRequested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAuthorizationRequested.Merge(m, src)
}
func (m *UserAuthorizationRequested) XXX_Size() int {
	return xxx_messageInfo_UserAuthorizationRequested.Size(m)
}
func (m *UserAuthorizationRequested) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAuthorizationRequested.DiscardUnknown(m)
}

var xxx_messageInfo_UserAuthorizationRequested proto.InternalMessageInfo

func (m *UserAuthorizationRequested) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserAuthorizationRequested) GetRole() user.Role {
	if m != nil {
		return m.Role
	}
	return user.Role_USER
}

func (m *UserAuthorizationRequested) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type UserAuthorized struct {
	Uid                  string         `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	EventStatus          *events.Status `protobuf:"bytes,2,opt,name=event_status,json=eventStatus,proto3" json:"event_status,omitempty"`
	User                 *user.User     `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserAuthorized) Reset()         { *m = UserAuthorized{} }
func (m *UserAuthorized) String() string { return proto.CompactTextString(m) }
func (*UserAuthorized) ProtoMessage()    {}
func (*UserAuthorized) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f3a799ad09b2336, []int{3}
}

func (m *UserAuthorized) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAuthorized.Unmarshal(m, b)
}
func (m *UserAuthorized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAuthorized.Marshal(b, m, deterministic)
}
func (m *UserAuthorized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAuthorized.Merge(m, src)
}
func (m *UserAuthorized) XXX_Size() int {
	return xxx_messageInfo_UserAuthorized.Size(m)
}
func (m *UserAuthorized) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAuthorized.DiscardUnknown(m)
}

var xxx_messageInfo_UserAuthorized proto.InternalMessageInfo

func (m *UserAuthorized) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserAuthorized) GetEventStatus() *events.Status {
	if m != nil {
		return m.EventStatus
	}
	return nil
}

func (m *UserAuthorized) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*UserAuthenticationRequested)(nil), "rpc.UserAuthenticationRequested")
	proto.RegisterType((*UserAuthenticated)(nil), "rpc.UserAuthenticated")
	proto.RegisterType((*UserAuthorizationRequested)(nil), "rpc.UserAuthorizationRequested")
	proto.RegisterType((*UserAuthorized)(nil), "rpc.UserAuthorized")
}

func init() { proto.RegisterFile("grpc/user.proto", fileDescriptor_3f3a799ad09b2336) }

var fileDescriptor_3f3a799ad09b2336 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x6f, 0xd4, 0x30,
	0x14, 0x54, 0xd8, 0x8a, 0x8f, 0xb7, 0xf4, 0x63, 0xbd, 0xa8, 0x5a, 0x05, 0x10, 0xd5, 0x5e, 0x8a,
	0xf8, 0x70, 0x20, 0x70, 0x45, 0x90, 0x8a, 0x0b, 0x17, 0x54, 0x05, 0xed, 0x85, 0x0b, 0x4a, 0xe3,
	0xd7, 0xae, 0xdb, 0x6c, 0x1c, 0x6c, 0xa7, 0x8b, 0x90, 0x90, 0xf8, 0x17, 0x88, 0x23, 0x77, 0x7e,
	0x0f, 0xbf, 0x07, 0xf9, 0x39, 0x6d, 0x37, 0xbb, 0x2b, 0x68, 0x8b, 0xc4, 0x2d, 0x1e, 0xcf, 0x1b,
	0xcf, 0x8c, 0x15, 0xc3, 0xfa, 0x81, 0xae, 0xf2, 0xa8, 0x36, 0xa8, 0x79, 0xa5, 0x95, 0x55, 0xac,
	0xa3, 0xab, 0x3c, 0xec, 0xe3, 0x31, 0x96, 0xd6, 0x44, 0xc6, 0x66, 0xb6, 0x36, 0x7e, 0x27, 0x5c,
	0x77, 0xac, 0x19, 0x6a, 0xc8, 0x08, 0xa8, 0xb4, 0xda, 0x97, 0x05, 0x36, 0x58, 0x8f, 0xf4, 0x66,
	0xe7, 0x86, 0x09, 0xdc, 0x1e, 0x19, 0xd4, 0x49, 0x6d, 0xc7, 0x58, 0x5a, 0x99, 0x67, 0x56, 0xaa,
	0x32, 0xc5, 0x8f, 0x35, 0x1a, 0x8b, 0x82, 0x6d, 0x40, 0xa7, 0x96, 0x62, 0x10, 0x6c, 0x05, 0xf7,
	0x6f, 0xa4, 0xee, 0xd3, 0x21, 0x87, 0x53, 0x3b, 0xb8, 0xe2, 0x91, 0xc3, 0xa9, 0x1d, 0x7e, 0x0d,
	0xa0, 0x37, 0xa7, 0xb1, 0x74, 0xf2, 0x09, 0xdc, 0x24, 0xe7, 0x1f, 0xbc, 0x01, 0x92, 0xe8, 0xc6,
	0xab, 0x9c, 0x40, 0xfe, 0x8e, 0xc0, 0xb4, 0x4b, 0x2b, 0xbf, 0x60, 0xdb, 0xb0, 0xe2, 0x52, 0x0c,
	0x3a, 0xc4, 0xec, 0x73, 0xa7, 0x6e, 0x25, 0x1a, 0x4e, 0x39, 0xdd, 0x99, 0x29, 0x11, 0x86, 0x12,
	0xc2, 0x13, 0x07, 0x4a, 0xcb, 0xcf, 0x7f, 0x0d, 0xb1, 0x0d, 0x2b, 0x5a, 0x15, 0x48, 0x16, 0xd6,
	0x16, 0x84, 0x53, 0x55, 0x60, 0x4a, 0x84, 0x93, 0xb4, 0x9d, 0xb3, 0xb4, 0x5f, 0x60, 0x6d, 0xf6,
	0xa8, 0xff, 0x9c, 0x34, 0xfe, 0x11, 0xc0, 0x8a, 0x5b, 0xb2, 0xb7, 0xc0, 0x16, 0x2f, 0x8e, 0x6d,
	0x71, 0x5d, 0xe5, 0xfc, 0x0f, 0x37, 0x1a, 0x6e, 0x2e, 0x63, 0xa0, 0x60, 0x6f, 0xce, 0x2e, 0xf1,
	0xb4, 0x42, 0x76, 0xaf, 0x45, 0x5e, 0xac, 0x36, 0xec, 0x2f, 0x10, 0x50, 0xc4, 0xdf, 0x02, 0xb8,
	0x4e, 0x96, 0xb1, 0x52, 0xec, 0x21, 0x5c, 0x4b, 0x84, 0x20, 0xcb, 0xcb, 0x62, 0x85, 0x5d, 0x52,
	0x68, 0x6a, 0xe0, 0x00, 0xa3, 0x4a, 0x64, 0x16, 0xcf, 0xcf, 0x7f, 0x8d, 0x05, 0x9e, 0x97, 0x1f,
	0xff, 0x0c, 0xa0, 0xbb, 0xeb, 0x7f, 0x09, 0x32, 0xf7, 0x14, 0x20, 0x11, 0xa2, 0x41, 0xd8, 0xe6,
	0xdc, 0x7c, 0x83, 0xb7, 0x8f, 0x7c, 0x0e, 0xab, 0xde, 0xe2, 0x45, 0xa7, 0xbc, 0xd1, 0x8b, 0x4c,
	0xc5, 0xdf, 0x03, 0x60, 0xa3, 0xf2, 0x18, 0xb5, 0xdc, 0x97, 0x28, 0x4e, 0x2b, 0x7d, 0x09, 0x3d,
	0x57, 0x69, 0x6b, 0x83, 0xdd, 0x9d, 0x0f, 0xdf, 0xda, 0x6e, 0xbb, 0xd9, 0x81, 0x5b, 0x4d, 0x6d,
	0x97, 0xd6, 0x88, 0x7f, 0x05, 0xd0, 0x4b, 0xd1, 0xa0, 0xdd, 0xcd, 0x8c, 0x99, 0x2a, 0x2d, 0xc8,
	0xda, 0x0b, 0xd8, 0x48, 0x84, 0x68, 0xe1, 0xec, 0xce, 0xfc, 0xef, 0x35, 0xbb, 0xdb, 0x36, 0xf6,
	0x0a, 0xfa, 0xbe, 0xdc, 0x7f, 0x51, 0xf0, 0xd1, 0x2e, 0xab, 0xb0, 0xf3, 0xe8, 0xfd, 0x83, 0x03,
	0x69, 0xc7, 0xf5, 0x1e, 0xcf, 0xd5, 0x24, 0x92, 0xc5, 0x38, 0x9b, 0x4c, 0xc6, 0x42, 0x44, 0x47,
	0xb5, 0xc8, 0x8e, 0xe4, 0x63, 0xfc, 0x64, 0x51, 0x97, 0x59, 0x61, 0x22, 0xf7, 0x98, 0xee, 0x5d,
	0xa5, 0x67, 0xf4, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xda, 0x32, 0xeb, 0xab, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	UserAuthentication(ctx context.Context, in *UserAuthenticationRequested, opts ...grpc.CallOption) (*UserAuthenticated, error)
	UserAuthorization(ctx context.Context, in *UserAuthorizationRequested, opts ...grpc.CallOption) (*UserAuthorized, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserAuthentication(ctx context.Context, in *UserAuthenticationRequested, opts ...grpc.CallOption) (*UserAuthenticated, error) {
	out := new(UserAuthenticated)
	err := c.cc.Invoke(ctx, "/rpc.User/UserAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserAuthorization(ctx context.Context, in *UserAuthorizationRequested, opts ...grpc.CallOption) (*UserAuthorized, error) {
	out := new(UserAuthorized)
	err := c.cc.Invoke(ctx, "/rpc.User/UserAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	UserAuthentication(context.Context, *UserAuthenticationRequested) (*UserAuthenticated, error)
	UserAuthorization(context.Context, *UserAuthorizationRequested) (*UserAuthorized, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) UserAuthentication(ctx context.Context, req *UserAuthenticationRequested) (*UserAuthenticated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthentication not implemented")
}
func (*UnimplementedUserServer) UserAuthorization(ctx context.Context, req *UserAuthorizationRequested) (*UserAuthorized, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthorization not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_UserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthenticationRequested)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.User/UserAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserAuthentication(ctx, req.(*UserAuthenticationRequested))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthorizationRequested)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.User/UserAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserAuthorization(ctx, req.(*UserAuthorizationRequested))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuthentication",
			Handler:    _User_UserAuthentication_Handler,
		},
		{
			MethodName: "UserAuthorization",
			Handler:    _User_UserAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/user.proto",
}

// UserRepoClient is the client API for UserRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserRepoClient interface {
	AddUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*Status, error)
	UpdateUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*Status, error)
}

type userRepoClient struct {
	cc *grpc.ClientConn
}

func NewUserRepoClient(cc *grpc.ClientConn) UserRepoClient {
	return &userRepoClient{cc}
}

func (c *userRepoClient) AddUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.UserRepo/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) UpdateUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.UserRepo/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) DeleteUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.UserRepo/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRepoServer is the server API for UserRepo service.
type UserRepoServer interface {
	AddUser(context.Context, *user.User) (*Status, error)
	UpdateUser(context.Context, *user.User) (*Status, error)
	DeleteUser(context.Context, *user.User) (*Status, error)
}

// UnimplementedUserRepoServer can be embedded to have forward compatible implementations.
type UnimplementedUserRepoServer struct {
}

func (*UnimplementedUserRepoServer) AddUser(ctx context.Context, req *user.User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedUserRepoServer) UpdateUser(ctx context.Context, req *user.User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserRepoServer) DeleteUser(ctx context.Context, req *user.User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

func RegisterUserRepoServer(s *grpc.Server, srv UserRepoServer) {
	s.RegisterService(&_UserRepo_serviceDesc, srv)
}

func _UserRepo_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserRepo/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).AddUser(ctx, req.(*user.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserRepo/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).UpdateUser(ctx, req.(*user.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserRepo/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).DeleteUser(ctx, req.(*user.User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRepo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.UserRepo",
	HandlerType: (*UserRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserRepo_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserRepo_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserRepo_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/user.proto",
}

// ProfileRepoClient is the client API for ProfileRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileRepoClient interface {
	AddProfile(ctx context.Context, in *user.Profile, opts ...grpc.CallOption) (*Status, error)
	UpdateProfile(ctx context.Context, in *user.Profile, opts ...grpc.CallOption) (*Status, error)
	DeleteProfile(ctx context.Context, in *user.Profile, opts ...grpc.CallOption) (*Status, error)
}

type profileRepoClient struct {
	cc *grpc.ClientConn
}

func NewProfileRepoClient(cc *grpc.ClientConn) ProfileRepoClient {
	return &profileRepoClient{cc}
}

func (c *profileRepoClient) AddProfile(ctx context.Context, in *user.Profile, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.ProfileRepo/AddProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepoClient) UpdateProfile(ctx context.Context, in *user.Profile, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.ProfileRepo/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepoClient) DeleteProfile(ctx context.Context, in *user.Profile, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.ProfileRepo/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileRepoServer is the server API for ProfileRepo service.
type ProfileRepoServer interface {
	AddProfile(context.Context, *user.Profile) (*Status, error)
	UpdateProfile(context.Context, *user.Profile) (*Status, error)
	DeleteProfile(context.Context, *user.Profile) (*Status, error)
}

// UnimplementedProfileRepoServer can be embedded to have forward compatible implementations.
type UnimplementedProfileRepoServer struct {
}

func (*UnimplementedProfileRepoServer) AddProfile(ctx context.Context, req *user.Profile) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (*UnimplementedProfileRepoServer) UpdateProfile(ctx context.Context, req *user.Profile) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedProfileRepoServer) DeleteProfile(ctx context.Context, req *user.Profile) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}

func RegisterProfileRepoServer(s *grpc.Server, srv ProfileRepoServer) {
	s.RegisterService(&_ProfileRepo_serviceDesc, srv)
}

func _ProfileRepo_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepoServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ProfileRepo/AddProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepoServer).AddProfile(ctx, req.(*user.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepo_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepoServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ProfileRepo/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepoServer).UpdateProfile(ctx, req.(*user.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepo_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepoServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ProfileRepo/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepoServer).DeleteProfile(ctx, req.(*user.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileRepo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ProfileRepo",
	HandlerType: (*ProfileRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProfile",
			Handler:    _ProfileRepo_AddProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileRepo_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfileRepo_DeleteProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/user.proto",
}

// UnverifiedUserRepoClient is the client API for UnverifiedUserRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnverifiedUserRepoClient interface {
	AddUnverifiedUser(ctx context.Context, in *user.UnverifiedUser, opts ...grpc.CallOption) (*Status, error)
	DeleteUnverifiedUser(ctx context.Context, in *user.UnverifiedUser, opts ...grpc.CallOption) (*Status, error)
}

type unverifiedUserRepoClient struct {
	cc *grpc.ClientConn
}

func NewUnverifiedUserRepoClient(cc *grpc.ClientConn) UnverifiedUserRepoClient {
	return &unverifiedUserRepoClient{cc}
}

func (c *unverifiedUserRepoClient) AddUnverifiedUser(ctx context.Context, in *user.UnverifiedUser, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.UnverifiedUserRepo/AddUnverifiedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unverifiedUserRepoClient) DeleteUnverifiedUser(ctx context.Context, in *user.UnverifiedUser, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.UnverifiedUserRepo/DeleteUnverifiedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnverifiedUserRepoServer is the server API for UnverifiedUserRepo service.
type UnverifiedUserRepoServer interface {
	AddUnverifiedUser(context.Context, *user.UnverifiedUser) (*Status, error)
	DeleteUnverifiedUser(context.Context, *user.UnverifiedUser) (*Status, error)
}

// UnimplementedUnverifiedUserRepoServer can be embedded to have forward compatible implementations.
type UnimplementedUnverifiedUserRepoServer struct {
}

func (*UnimplementedUnverifiedUserRepoServer) AddUnverifiedUser(ctx context.Context, req *user.UnverifiedUser) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUnverifiedUser not implemented")
}
func (*UnimplementedUnverifiedUserRepoServer) DeleteUnverifiedUser(ctx context.Context, req *user.UnverifiedUser) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnverifiedUser not implemented")
}

func RegisterUnverifiedUserRepoServer(s *grpc.Server, srv UnverifiedUserRepoServer) {
	s.RegisterService(&_UnverifiedUserRepo_serviceDesc, srv)
}

func _UnverifiedUserRepo_AddUnverifiedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UnverifiedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnverifiedUserRepoServer).AddUnverifiedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UnverifiedUserRepo/AddUnverifiedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnverifiedUserRepoServer).AddUnverifiedUser(ctx, req.(*user.UnverifiedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnverifiedUserRepo_DeleteUnverifiedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UnverifiedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnverifiedUserRepoServer).DeleteUnverifiedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UnverifiedUserRepo/DeleteUnverifiedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnverifiedUserRepoServer).DeleteUnverifiedUser(ctx, req.(*user.UnverifiedUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnverifiedUserRepo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.UnverifiedUserRepo",
	HandlerType: (*UnverifiedUserRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUnverifiedUser",
			Handler:    _UnverifiedUserRepo_AddUnverifiedUser_Handler,
		},
		{
			MethodName: "DeleteUnverifiedUser",
			Handler:    _UnverifiedUserRepo_DeleteUnverifiedUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/user.proto",
}

// ResetPasswordRepoClient is the client API for ResetPasswordRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResetPasswordRepoClient interface {
	AddResetPassword(ctx context.Context, in *user.ResetPassword, opts ...grpc.CallOption) (*Status, error)
	UpdateResetPassword(ctx context.Context, in *user.ResetPassword, opts ...grpc.CallOption) (*Status, error)
	DeleteResetPassword(ctx context.Context, in *user.ResetPassword, opts ...grpc.CallOption) (*Status, error)
}

type resetPasswordRepoClient struct {
	cc *grpc.ClientConn
}

func NewResetPasswordRepoClient(cc *grpc.ClientConn) ResetPasswordRepoClient {
	return &resetPasswordRepoClient{cc}
}

func (c *resetPasswordRepoClient) AddResetPassword(ctx context.Context, in *user.ResetPassword, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.ResetPasswordRepo/AddResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resetPasswordRepoClient) UpdateResetPassword(ctx context.Context, in *user.ResetPassword, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.ResetPasswordRepo/UpdateResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resetPasswordRepoClient) DeleteResetPassword(ctx context.Context, in *user.ResetPassword, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.ResetPasswordRepo/DeleteResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResetPasswordRepoServer is the server API for ResetPasswordRepo service.
type ResetPasswordRepoServer interface {
	AddResetPassword(context.Context, *user.ResetPassword) (*Status, error)
	UpdateResetPassword(context.Context, *user.ResetPassword) (*Status, error)
	DeleteResetPassword(context.Context, *user.ResetPassword) (*Status, error)
}

// UnimplementedResetPasswordRepoServer can be embedded to have forward compatible implementations.
type UnimplementedResetPasswordRepoServer struct {
}

func (*UnimplementedResetPasswordRepoServer) AddResetPassword(ctx context.Context, req *user.ResetPassword) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResetPassword not implemented")
}
func (*UnimplementedResetPasswordRepoServer) UpdateResetPassword(ctx context.Context, req *user.ResetPassword) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResetPassword not implemented")
}
func (*UnimplementedResetPasswordRepoServer) DeleteResetPassword(ctx context.Context, req *user.ResetPassword) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResetPassword not implemented")
}

func RegisterResetPasswordRepoServer(s *grpc.Server, srv ResetPasswordRepoServer) {
	s.RegisterService(&_ResetPasswordRepo_serviceDesc, srv)
}

func _ResetPasswordRepo_AddResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResetPasswordRepoServer).AddResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ResetPasswordRepo/AddResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResetPasswordRepoServer).AddResetPassword(ctx, req.(*user.ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResetPasswordRepo_UpdateResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResetPasswordRepoServer).UpdateResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ResetPasswordRepo/UpdateResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResetPasswordRepoServer).UpdateResetPassword(ctx, req.(*user.ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResetPasswordRepo_DeleteResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.ResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResetPasswordRepoServer).DeleteResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ResetPasswordRepo/DeleteResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResetPasswordRepoServer).DeleteResetPassword(ctx, req.(*user.ResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResetPasswordRepo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ResetPasswordRepo",
	HandlerType: (*ResetPasswordRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResetPassword",
			Handler:    _ResetPasswordRepo_AddResetPassword_Handler,
		},
		{
			MethodName: "UpdateResetPassword",
			Handler:    _ResetPasswordRepo_UpdateResetPassword_Handler,
		},
		{
			MethodName: "DeleteResetPassword",
			Handler:    _ResetPasswordRepo_DeleteResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/user.proto",
}
